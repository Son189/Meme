{"ast":null,"code":"var _jsxFileName = \"/home/user/Memes-Home/meme/src/components/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Textfit from 'react-textfit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MemeGenerator() {\n  _s();\n  const [images, setImages] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [topText, setTopText] = useState('');\n  const [bottomText, setBottomText] = useState('');\n  useEffect(() => {\n    fetch('https://api.imgflip.com/get_memes').then(response => response.json()).then(data => setImages(data));\n  }, []);\n  function handleImageClick(image) {\n    setSelectedImage(image);\n  }\n  function handleTopTextChange(event) {\n    setTopText(event.target.value);\n  }\n  function handleBottomTextChange(event) {\n    setBottomText(event.target.value);\n  }\n  function handleCreateMeme() {\n    // Create the meme using the selected image and the text entered by the user.\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Meme Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: images.map(image => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: image.url,\n        alt: image.title,\n        onClick: () => handleImageClick(image)\n      }, image.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), selectedImage && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: selectedImage.url,\n        alt: selectedImage.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"top-text\",\n          children: \"Top Text:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"top-text\",\n          value: topText,\n          onChange: handleTopTextChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"bottom-text\",\n          children: \"Bottom Text:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"bottom-text\",\n          value: bottomText,\n          onChange: handleBottomTextChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCreateMeme,\n        children: \"Create Meme\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(MemeGenerator, \"4gA9z+vPgluyNZYLgMXdYq0+dNA=\");\n_c = MemeGenerator;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"MemeGenerator\");","map":{"version":3,"names":["React","useState","useEffect","Textfit","jsxDEV","_jsxDEV","MemeGenerator","_s","images","setImages","selectedImage","setSelectedImage","topText","setTopText","bottomText","setBottomText","fetch","then","response","json","data","handleImageClick","image","handleTopTextChange","event","target","value","handleBottomTextChange","handleCreateMeme","children","fileName","_jsxFileName","lineNumber","columnNumber","map","src","url","alt","title","onClick","id","htmlFor","type","onChange","_c","Home","$RefreshReg$"],"sources":["/home/user/Memes-Home/meme/src/components/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Textfit from 'react-textfit';\n\nfunction MemeGenerator() {\n  const [images, setImages] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [topText, setTopText] = useState('');\n  const [bottomText, setBottomText] = useState('');\n\n  useEffect(() => {\n    fetch('https://api.imgflip.com/get_memes')\n      .then(response => response.json())\n      .then(data => setImages(data));\n  }, []);\n\n  function handleImageClick(image) {\n    setSelectedImage(image);\n  }\n\n  function handleTopTextChange(event) {\n    setTopText(event.target.value);\n  }\n\n  function handleBottomTextChange(event) {\n    setBottomText(event.target.value);\n  }\n\n  function handleCreateMeme() {\n    // Create the meme using the selected image and the text entered by the user.\n  }\n\n  return (\n    <div>\n      <h1>Meme Generator</h1>\n      <div>\n        {images.map(image => (\n          <img\n            key={image.id}\n            src={image.url}\n            alt={image.title}\n            onClick={() => handleImageClick(image)}\n          />\n        ))}\n      </div>\n      {selectedImage && (\n        <div>\n          <img src={selectedImage.url} alt={selectedImage.title} />\n          <div>\n            <label htmlFor=\"top-text\">Top Text:</label>\n            <input type=\"text\" id=\"top-text\" value={topText} onChange={handleTopTextChange} />\n          </div>\n          <div>\n            <label htmlFor=\"bottom-text\">Bottom Text:</label>\n            <input type=\"text\" id=\"bottom-text\" value={bottomText} onChange={handleBottomTextChange} />\n          </div>\n          <button onClick={handleCreateMeme}>Create Meme</button>\n        </div>\n      )}\n    </div>\n  );\n}\nexport default Home"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}