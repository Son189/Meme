{"ast":null,"code":"var _jsxFileName = \"/home/user/Memes-Home/meme/src/components/MemeGen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MemeGenerator = () => {\n  _s();\n  const [image, setImage] = useState('');\n  const [topText, setTopText] = useState('');\n  const [bottomText, setBottomText] = useState('');\n  const [generatedMemes, setGeneratedMemes] = useState([]);\n  const [allMemes, setAllMemes] = useState([]);\n  useEffect(() => {\n    fetch('https://api.imgflip.com/get_memes').then(response => response.json()).then(data => setAllMemes(data.data.memes)).catch(error => console.error(error));\n  }, []);\n  const generateMeme = () => {\n    const index = Math.floor(Math.random() * allMemes.length);\n    const meme = allMemes[index];\n    setImage(meme.url);\n  };\n  const handleTopTextChange = event => {\n    setTopText(event.target.value);\n  };\n  const handleBottomTextChange = event => {\n    setBottomText(event.target.value);\n  };\n  const handleSaveMeme = () => {\n    const newMeme = {\n      image,\n      topText,\n      bottomText\n    };\n    fetch('https://mybackendapi.com/memes', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newMeme)\n    }).then(response => response.json()).then(data => setGeneratedMemes([...generatedMemes, data])).catch(error => console.error(error));\n    setImage('');\n    setTopText('');\n    setBottomText('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateMeme,\n      children: \"Generate Meme\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), image && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: image,\n        alt: \"Random Meme\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"topText\",\n          children: \"Top Text:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"topText\",\n          value: topText,\n          onChange: handleTopTextChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"bottomText\",\n          children: \"Bottom Text:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"bottomText\",\n          value: bottomText,\n          onChange: handleBottomTextChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSaveMeme,\n        children: \"Save Meme\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Generated Memes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), generatedMemes.map((meme, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: meme.image,\n        alt: \"Generated Meme\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: meme.topText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: meme.bottomText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(MemeGenerator, \"BYMwgvLBejpsk8GEML+AgtyqRdo=\");\n_c = MemeGenerator;\nexport default MemeGenerator;\nvar _c;\n$RefreshReg$(_c, \"MemeGenerator\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MemeGenerator","_s","image","setImage","topText","setTopText","bottomText","setBottomText","generatedMemes","setGeneratedMemes","allMemes","setAllMemes","fetch","then","response","json","data","memes","catch","error","console","generateMeme","index","Math","floor","random","length","meme","url","handleTopTextChange","event","target","value","handleBottomTextChange","handleSaveMeme","newMeme","method","headers","body","JSON","stringify","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","htmlFor","type","id","onChange","map","_c","$RefreshReg$"],"sources":["/home/user/Memes-Home/meme/src/components/MemeGen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst MemeGenerator = () => {\n  const [image, setImage] = useState('');\n  const [topText, setTopText] = useState('');\n  const [bottomText, setBottomText] = useState('');\n  const [generatedMemes, setGeneratedMemes] = useState([]);\n  const [allMemes, setAllMemes] = useState([]);\n\n  useEffect(() => {\n    fetch('https://api.imgflip.com/get_memes')\n      .then(response => response.json())\n      .then(data => setAllMemes(data.data.memes))\n      .catch(error => console.error(error));\n  }, []);\n\n  const generateMeme = () => {\n    const index = Math.floor(Math.random() * allMemes.length);\n    const meme = allMemes[index];\n    setImage(meme.url);\n  };\n\n  const handleTopTextChange = (event) => {\n    setTopText(event.target.value);\n  };\n\n  const handleBottomTextChange = (event) => {\n    setBottomText(event.target.value);\n  };\n\n  const handleSaveMeme = () => {\n    const newMeme = {\n      image,\n      topText,\n      bottomText,\n    };\n\n    fetch('https://mybackendapi.com/memes', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(newMeme),\n    })\n      .then(response => response.json())\n      .then(data => setGeneratedMemes([...generatedMemes, data]))\n      .catch(error => console.error(error));\n\n    setImage('');\n    setTopText('');\n    setBottomText('');\n  };\n\n  return (\n    <div>\n      <button onClick={generateMeme}>Generate Meme</button>\n      {image && (\n        <div>\n          <img src={image} alt=\"Random Meme\" />\n          <div>\n            <label htmlFor=\"topText\">Top Text:</label>\n            <input type=\"text\" id=\"topText\" value={topText} onChange={handleTopTextChange} />\n          </div>\n          <div>\n            <label htmlFor=\"bottomText\">Bottom Text:</label>\n            <input type=\"text\" id=\"bottomText\" value={bottomText} onChange={handleBottomTextChange} />\n          </div>\n          <button onClick={handleSaveMeme}>Save Meme</button>\n        </div>\n      )}\n      <h2>Generated Memes</h2>\n      {generatedMemes.map((meme, index) => (\n        <div key={index}>\n          <img src={meme.image} alt=\"Generated Meme\" />\n          <div>{meme.topText}</div>\n          <div>{meme.bottomText}</div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default MemeGenerator;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}