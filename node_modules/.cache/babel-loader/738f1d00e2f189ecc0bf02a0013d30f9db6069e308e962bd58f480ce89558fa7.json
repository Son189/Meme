{"ast":null,"code":"var _jsxFileName = \"/home/user/Memes-Home/meme/src/components/MemeGen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [memes, setMemes] = useState([]);\n  const [selectedMeme, setSelectedMeme] = useState(null);\n  const [topText, setTopText] = useState('');\n  const [bottomText, setBottomText] = useState('');\n  useEffect(() => {\n    const savedMemes = JSON.parse(localStorage.getItem('memes') || '[]');\n    setMemes(savedMemes);\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('memes', JSON.stringify(memes));\n  }, [memes]);\n  function handleMemeSelect(index) {\n    setSelectedMeme(memes[index]);\n  }\n  function handleTopTextChange(event) {\n    setTopText(event.target.value);\n  }\n  function handleBottomTextChange(event) {\n    setBottomText(event.target.value);\n  }\n  function handleGenerateMeme() {\n    const params = new URLSearchParams({\n      template_id: selectedMeme.id,\n      text0: topText,\n      text1: bottomText,\n      username: '<your-imgflip-username>',\n      password: '<your-imgflip-password>'\n    });\n    fetch(`https://api.imgflip.com/caption_image?${params.toString()}`).then(response => response.json()).then(data => {\n      const memeUrl = data.data.url;\n      const newMeme = {\n        id: memes.length + 1,\n        name: selectedMeme.name,\n        url: memeUrl\n      };\n      setMemes([...memes, newMeme]);\n      setSelectedMeme(null);\n      setTopText('');\n      setBottomText('');\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My Memes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: memes.map(meme => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: meme.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: meme.url,\n          alt: meme.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)]\n      }, meme.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), selectedMeme ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: selectedMeme.url,\n        alt: selectedMeme.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Top text\",\n        value: topText,\n        onChange: handleTopTextChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Bottom text\",\n        value: bottomText,\n        onChange: handleBottomTextChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGenerateMeme,\n        children: \"Generate Meme\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedMeme(null),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Select a meme:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: memes.map((meme, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleMemeSelect(index),\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: meme.url,\n            alt: meme.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 17\n          }, this)\n        }, meme.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedMeme(memes[0]),\n        children: \"Use First Meme\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"aqSCWWXj33FRC0rPTz5pp4SptCg=\");\n_c = App;\nexport default MemeG;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","memes","setMemes","selectedMeme","setSelectedMeme","topText","setTopText","bottomText","setBottomText","savedMemes","JSON","parse","localStorage","getItem","setItem","stringify","handleMemeSelect","index","handleTopTextChange","event","target","value","handleBottomTextChange","handleGenerateMeme","params","URLSearchParams","template_id","id","text0","text1","username","password","fetch","toString","then","response","json","data","memeUrl","url","newMeme","length","name","children","fileName","_jsxFileName","lineNumber","columnNumber","map","meme","src","alt","type","placeholder","onChange","onClick","_c","MemeG","$RefreshReg$"],"sources":["/home/user/Memes-Home/meme/src/components/MemeGen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction App() {\n  const [memes, setMemes] = useState([]);\n  const [selectedMeme, setSelectedMeme] = useState(null);\n  const [topText, setTopText] = useState('');\n  const [bottomText, setBottomText] = useState('');\n\n  useEffect(() => {\n    const savedMemes = JSON.parse(localStorage.getItem('memes') || '[]');\n    setMemes(savedMemes);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('memes', JSON.stringify(memes));\n  }, [memes]);\n\n  function handleMemeSelect(index) {\n    setSelectedMeme(memes[index]);\n  }\n\n  function handleTopTextChange(event) {\n    setTopText(event.target.value);\n  }\n\n  function handleBottomTextChange(event) {\n    setBottomText(event.target.value);\n  }\n\n  function handleGenerateMeme() {\n    const params = new URLSearchParams({\n      template_id: selectedMeme.id,\n      text0: topText,\n      text1: bottomText,\n      username: '<your-imgflip-username>',\n      password: '<your-imgflip-password>',\n    });\n\n    fetch(`https://api.imgflip.com/caption_image?${params.toString()}`)\n      .then(response => response.json())\n      .then(data => {\n        const memeUrl = data.data.url;\n        const newMeme = { id: memes.length + 1, name: selectedMeme.name, url: memeUrl };\n        setMemes([...memes, newMeme]);\n        setSelectedMeme(null);\n        setTopText('');\n        setBottomText('');\n      });\n  }\n\n  return (\n    <div>\n      <h1>My Memes</h1>\n      <div>\n        {memes.map(meme => (\n          <div key={meme.id}>\n            <h2>{meme.name}</h2>\n            <img src={meme.url} alt={meme.name} />\n          </div>\n        ))}\n      </div>\n      {selectedMeme ? (\n        <div>\n          <img src={selectedMeme.url} alt={selectedMeme.name} />\n          <br />\n          <input type=\"text\" placeholder=\"Top text\" value={topText} onChange={handleTopTextChange} />\n          <br />\n          <input type=\"text\" placeholder=\"Bottom text\" value={bottomText} onChange={handleBottomTextChange} />\n          <br />\n          <button onClick={handleGenerateMeme}>Generate Meme</button>\n          <button onClick={() => setSelectedMeme(null)}>Cancel</button>\n        </div>\n      ) : (\n        <div>\n          <h2>Select a meme:</h2>\n          <ul>\n            {memes.map((meme, index) => (\n              <li key={meme.id} onClick={() => handleMemeSelect(index)}>\n                <img src={meme.url} alt={meme.name} />\n              </li>\n            ))}\n          </ul>\n          <button onClick={() => setSelectedMeme(memes[0])}>Use First Meme</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default MemeG;\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd,MAAMa,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC;IACpEX,QAAQ,CAACO,UAAU,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAENb,SAAS,CAAC,MAAM;IACdgB,YAAY,CAACE,OAAO,CAAC,OAAO,EAAEJ,IAAI,CAACK,SAAS,CAACd,KAAK,CAAC,CAAC;EACtD,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,SAASe,gBAAgBA,CAACC,KAAK,EAAE;IAC/Bb,eAAe,CAACH,KAAK,CAACgB,KAAK,CAAC,CAAC;EAC/B;EAEA,SAASC,mBAAmBA,CAACC,KAAK,EAAE;IAClCb,UAAU,CAACa,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAChC;EAEA,SAASC,sBAAsBA,CAACH,KAAK,EAAE;IACrCX,aAAa,CAACW,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACnC;EAEA,SAASE,kBAAkBA,CAAA,EAAG;IAC5B,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC;MACjCC,WAAW,EAAEvB,YAAY,CAACwB,EAAE;MAC5BC,KAAK,EAAEvB,OAAO;MACdwB,KAAK,EAAEtB,UAAU;MACjBuB,QAAQ,EAAE,yBAAyB;MACnCC,QAAQ,EAAE;IACZ,CAAC,CAAC;IAEFC,KAAK,CAAE,yCAAwCR,MAAM,CAACS,QAAQ,EAAG,EAAC,CAAC,CAChEC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACZ,MAAMC,OAAO,GAAGD,IAAI,CAACA,IAAI,CAACE,GAAG;MAC7B,MAAMC,OAAO,GAAG;QAAEb,EAAE,EAAE1B,KAAK,CAACwC,MAAM,GAAG,CAAC;QAAEC,IAAI,EAAEvC,YAAY,CAACuC,IAAI;QAAEH,GAAG,EAAED;MAAQ,CAAC;MAC/EpC,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEuC,OAAO,CAAC,CAAC;MAC7BpC,eAAe,CAAC,IAAI,CAAC;MACrBE,UAAU,CAAC,EAAE,CAAC;MACdE,aAAa,CAAC,EAAE,CAAC;IACnB,CAAC,CAAC;EACN;EAEA,oBACEV,OAAA;IAAA6C,QAAA,gBACE7C,OAAA;MAAA6C,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eACjBjD,OAAA;MAAA6C,QAAA,EACG1C,KAAK,CAAC+C,GAAG,CAACC,IAAI,iBACbnD,OAAA;QAAA6C,QAAA,gBACE7C,OAAA;UAAA6C,QAAA,EAAKM,IAAI,CAACP;QAAI;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAM,eACpBjD,OAAA;UAAKoD,GAAG,EAAED,IAAI,CAACV,GAAI;UAACY,GAAG,EAAEF,IAAI,CAACP;QAAK;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAG;MAAA,GAF9BE,IAAI,CAACtB,EAAE;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAIlB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACE,EACL5C,YAAY,gBACXL,OAAA;MAAA6C,QAAA,gBACE7C,OAAA;QAAKoD,GAAG,EAAE/C,YAAY,CAACoC,GAAI;QAACY,GAAG,EAAEhD,YAAY,CAACuC;MAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eACtDjD,OAAA;QAAA8C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eACNjD,OAAA;QAAOsD,IAAI,EAAC,MAAM;QAACC,WAAW,EAAC,UAAU;QAAChC,KAAK,EAAEhB,OAAQ;QAACiD,QAAQ,EAAEpC;MAAoB;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eAC3FjD,OAAA;QAAA8C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eACNjD,OAAA;QAAOsD,IAAI,EAAC,MAAM;QAACC,WAAW,EAAC,aAAa;QAAChC,KAAK,EAAEd,UAAW;QAAC+C,QAAQ,EAAEhC;MAAuB;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eACpGjD,OAAA;QAAA8C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eACNjD,OAAA;QAAQyD,OAAO,EAAEhC,kBAAmB;QAAAoB,QAAA,EAAC;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,eAC3DjD,OAAA;QAAQyD,OAAO,EAAEA,CAAA,KAAMnD,eAAe,CAAC,IAAI,CAAE;QAAAuC,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACzD,gBAENjD,OAAA;MAAA6C,QAAA,gBACE7C,OAAA;QAAA6C,QAAA,EAAI;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACvBjD,OAAA;QAAA6C,QAAA,EACG1C,KAAK,CAAC+C,GAAG,CAAC,CAACC,IAAI,EAAEhC,KAAK,kBACrBnB,OAAA;UAAkByD,OAAO,EAAEA,CAAA,KAAMvC,gBAAgB,CAACC,KAAK,CAAE;UAAA0B,QAAA,eACvD7C,OAAA;YAAKoD,GAAG,EAAED,IAAI,CAACV,GAAI;YAACY,GAAG,EAAEF,IAAI,CAACP;UAAK;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAG,GAD/BE,IAAI,CAACtB,EAAE;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAGjB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACC,eACLjD,OAAA;QAAQyD,OAAO,EAAEA,CAAA,KAAMnD,eAAe,CAACH,KAAK,CAAC,CAAC,CAAC,CAAE;QAAA0C,QAAA,EAAC;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAE5E;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACG;AAEV;AAAC/C,EAAA,CArFQD,GAAG;AAAAyD,EAAA,GAAHzD,GAAG;AAuFZ,eAAe0D,KAAK;AAAC,IAAAD,EAAA;AAAAE,YAAA,CAAAF,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}